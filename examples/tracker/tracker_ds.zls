(*
 * Copyright 2018-2020 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *)

open Probzelus
open Distribution
open Infer_ds_streaming
open Zelus_owl
open Zelus_owl_plplot
open Plot

(** Utility functions and constants *)

let diagm l = Mat.diagm (Lib.of_lists [l])
let vec l = Lib.of_list l (List.length l) 1

let position x = Mat.get x 0 0
let acceleration x = Mat.get x 2 0
let speed x = Mat.get x 1 0

let mean x =
  mean_matrix x

let node plot file y =
  let h = Plot.create file in
  Plot.set_page_size h 500 400;
  let n, m = Mat.shape y in
  let x = Mat.sequential n 1 in
  Plot.plot h [ RGB (150,0,0) ] x (Mat.col y 0);
  Plot.plot h [ RGB (0,150,0) ] x (Mat.col y 1);
  Plot.plot h [ RGB (0,0,150) ] x (Mat.col y 2);
  Plot.output h

let a = Lib.of_lists
  [[ 1.0; 0.1; 0.0 ];
   [ 0.0; 1.0; 0.1 ];
   [ 0.0; 0.0; 0.0 ]]

let a_approx = Lib.of_lists
  [[ 1.0; 0.1; 0.0 ];
   [ 0.0; 1.0; 0.1 ];
   [ 0.0; 0.0; 0.000001 ]]

let b = Mat.eye 3
let q = diagm [1.0; 0.1; 0.1]
let r = diagm [1000.; 1000.; 1.0]
let n = Mat.zeros 3 3

let x_init = Lib.of_list [50.; 0.; 0.5] 3 1
let noise = diagm [0.01; 0.01; 0.01]

(** Simulating the environment *)

let node env (call_gps, cmd) = x, acc, gps where
  rec mu = x_init -> Mat.add (Mat.dot a (pre x)) (Mat.dot b cmd)
  and x = draw (Distribution.mv_gaussian (mu, noise))
  and acc = draw (Distribution.gaussian (acceleration x, 0.1))
  and present call_gps -> do emit gps = draw (Distribution.gaussian (position x, 0.1)) done


(** Linear-Quadratic Regulator *)

(* Using variable names matching here:
  https://en.wikipedia.org/wiki/Linearâ€“quadratic_regulator
 *)
let lqr_core a b q r n =
  let p = Linalg_d.dare a b q r in
  let btp = Mat.dot (Mat.transpose b) p in
  let f = Linalg_d.linsolve
    (Mat.add r (Mat.dot btp b))
    (Mat.add (Mat.transpose n) (Mat.dot btp a))
  in
  Mat.mul_scalar f (-1.)

let lqr a b x =
  let k = lqr_core a b q r n in
  Mat.mul (Mat.dot k x) (Lib.of_list [0.; 0.; 1.] 3 1)

(** Robot controller *)

let particles = 1

let proba kalman (xo, u, acc, gps) = x where
  rec mu = const xo -> (const a *@~ pre x) +@~ (const b *@~ const u)
  and x = sample (mv_gaussian (mu, noise))
  and () = observe (gaussian (vec_get (x, 2), 0.1), acc)
  and () = present gps(pos) ->
             observe (gaussian (vec_get (x, 0), 0.01), pos)
           else ()

let node robot (xo, uo, acc, gps) = (u, x_dist) where
  rec x_dist = infer particles kalman (xo, u, acc, gps)
  and u = uo -> pre (lqr a_approx b (mean x_dist))

(** Main *)

let node main () = () where
  rec t = 1 fby t + 1
  (* Robot *)
  and call_gps = true -> (t mod 50 = 0)
  and xt, acc, gps = env (call_gps, cmd)
  and cmd, x_dist = robot(x_init, Mat.zeros 3 1, acc, gps)
  (* Log *)
  and err_t = Mat.get (Mat.add (Mat.dot (Mat.transpose xt) (Mat.dot q xt))
                               (Mat.dot (Mat.transpose cmd) (Mat.dot r cmd))) 0 0
  and err = 0. -> (pre err) +. (err_t)
  and avg_err = err /. (float_of_int t)
  and yt = present gps(p) -> p else 0.
  and xest = mean x_dist
  and xye = Lib.of_lists [[position xt; yt; position xest]]
  (* Plot *)
  and res = (Mat.zeros 1 3) fby Mat.concat_vertical res xye
  and () = print_int t; print_string " >> "; print_float (avg_err); print_endline ""
  and present (t mod 51 = 50) -> do () = plot "plot_3pos.pdf" res done
