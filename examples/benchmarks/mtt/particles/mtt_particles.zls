(*
 * Copyright 2018-2020 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *)

open Mttlib
open Probzelus
open Util
open Distribution
open Zelus_owl
open Infer_pf

let proba death_fn _ =
  sample (bernoulli p_dead)

let proba new_track_init_fn _ =
  (new_track_num (), sample (mv_gaussian(mu_new, sigma_new)))

let proba state_update_fn (tr_num, tr) =
  (tr_num, sample (mv_gaussian(a_u *@ tr +@ b_u, sigma_update)))

let observe_fn (_, tr) =
  (mv_gaussian (proj_pos *@ tr, sigma_obs))

let proba clutter_init_fn _ =
  (mv_gaussian (mu_clutter, sigma_clutter))

let proba obsfn (var, value) =
  observe (var, value)

let proba model inp = t where
  rec init t = []  (* lst_iter *)
  and t_survived = ListP.filter death_fn (last t)
  and n_new = sample (poisson lambda_new)
  and t_new = ListP.ini new_track_init_fn n_new
  and t_tot = List.append t_survived t_new
  and t = ListP.map state_update_fn t_tot
  and obs = List.map observe_fn t
  and n_clutter = (List.length inp) - (List.length obs)
  (* and () = print_string (string_of_int (List.length t) ^ "\n")*)
  and () = observe(poisson lambda_clutter, n_clutter)
  and clutter = ListP.ini clutter_init_fn n_clutter 
  and obs_shuffled = sample (shuffle (List.append obs clutter))
  and present (not (n_clutter < 0)) -> do () = (ListP.iter2 obsfn (obs_shuffled, inp)) done
let node main particles (true_tr, obs) = tr_distr where
  rec tr_distr = infer particles model obs
  (* and () = print_string ((string_of_vec2_list tr) ^ " : " ^ (string_of_vec2_list obs) ^ "\n") *)
