open Probzelus
open Slamlib
open Infer_ds_gc

let sensor_noise = Array_misc.sensor_noise
let wheel_noise = Array_misc.wheel_noise
let max_pos = Array_misc.max_pos

let proba move (x_init, cmd) = x where
  rec init x = x_init
  and x =
    max 0 (min max_pos (if eval wheel_slip then last x else last x + cmd))
  and wheel_slip = sample (bernoulli (const wheel_noise))

let proba read (obs) = o where
  rec error = sample (bernoulli (const sensor_noise))
  and o = if eval error then not obs else obs

let proba beta_priors i = sample (beta (1., 1.))

let proba slam (obs, cmd) = pair (array map, const x) where
  rec init map = (Array_misc.ini (max_pos + 1) beta_priors) ()
  and x = move (0, cmd)
  and o = Array_misc.get map x
  and () = observe (bernoulli o, read(obs))

let node controller (x_dist) = cmd where
  rec xest = Distribution.draw x_dist
  and automaton
  | Go_right ->
      do cmd = 1
      unless (xest = max_pos) then Go_left
  | Go_left ->
      do cmd = -1
      unless (xest = 0) then Go_right
  end

let node main particles (tr, (obs, cmd)) = (), mse where
  rec t = 1. fby (t +. 1.)
  and cmd = 1 -> pre (controller x_d)
  and d = infer particles slam (obs, cmd)
  and d_map, x_d = Distribution.split d
  and map_d = Distribution.split_array d_map
  and error = Array_misc.error tr map_d x_d
  and total_error = error -> (pre total_error) +. error
  and mse = total_error /. t

(*
let node main particles (tr, observed) =
  let rec t = 1. fby (t +. 1.) in

  let d = infer particles slam observed in
  let d_map, x_d = Distribution.split d in
  let map_d = Distribution.split_array d_map in
  let error = Array_misc.error tr map_d x_d in
  let rec total_error = error -> (pre total_error) +. error in
  let mse = total_error /. t in
  (), mse
*)
