(*
 * Copyright 2018-2020 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *)

open Probzelus
open Slamlib
open Distribution
open Infer_pf
open Lib

let sensor_noise = Array_misc.sensor_noise
let wheel_noise = Array_misc.wheel_noise
let max_pos = Array_misc.max_pos

let proba move (x_init, cmd) = x where
  rec init x = x_init
  and x =
    max 0 (min max_pos (if wheel_slip then last x else last x + cmd))
  and wheel_slip = sample (bernoulli wheel_noise)

let proba bernoulli_priors i = sample (bernoulli (const 0.5))

let proba slam (obs, cmd) = pair (array map, const x) where
  rec init map = Array_misc.ini (max_pos + 1) bernoulli_priors ()
  and x = move (0, cmd)
  and o = Array_misc.get map x
  and () = observe (bernoulli (if o then (const (1. -. sensor_noise)) else (const sensor_noise)), obs)

let node main particles (tr, ()) = (x, d) where
  rec cmd = 1 -> pre (controller x_d)
  and d = infer particles slam (obs, cmd)
  and (obs, x) = slam_obs (tr, cmd)
  and _, x_d = Distribution.split d

let node main_time_env_inner particles (tr, _) = ((x, d), time_inner) where
  rec cmd = 1 -> pre (controller x_d)
  and d = infer particles slam (obs, cmd)
  and ((obs, x), time_inner) = slam_obs_time (tr, cmd)
  and _, x_d = Distribution.split d

let node main_time_all particles (tr, a) = (o, (t_main, t_env)) where
  rec ((o, t_env), t_main) = (Array_misc.time (main_time_env_inner particles)) (tr, a)

let node main_time_noenv particles (tr, a) = (o, t_env) where
  rec (o, t_env) = (Array_misc.time (main particles)) (tr, a)


(*let main _ = Array_misc.time (main_inner 19) "Total time: "*)

(*
let node main particles (tr, observed) =
  let rec t = 1. fby (t +. 1.) in

  let d = infer particles slam observed in
  let d_map, x_d = Distribution.split d in
  let map_d = Distribution.split_array d_map in
  let error = Array_misc.error tr map_d x_d in
  let rec total_error = error -> (pre total_error) +. error in
  let mse = total_error /. t in

  (), mse
*)
