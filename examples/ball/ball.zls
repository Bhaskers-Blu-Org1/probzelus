(*
 * Copyright 2018-2020 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *)

open Probzelus
open Distribution
(* open Display *)
open Infer_pf

let tau = 0.02


let node edge b = o where
  rec o = false -> b && not (pre b)

let node wait n = b where
  rec automaton
      | Wait ->
          local cpt in
          do cpt = 0 fby (cpt + 1)
          and b = false
          until (cpt = n) then True
      | True -> do b = true done

let node bounce_y (bumpers, x, y, py) = s where
  rec match World.Abs -> World.cross_y (bumpers, x, y, py) with
      | World.Abs -> do done
      | World.Pres b -> do emit s = snd b done
      end

let node win (x, y, py) = s where
  rec match World.Abs -> World.cross_y ([(World.basket_x, World.basket_y)], x, y, py) with
      | World.Abs -> do done
      | World.Pres b -> do emit s = snd b done
      end

let x_0 = -5.0
let y_0 = 15.0
(* let x_v = 0.72 *)
let x_v = 0.92
let g = 9.81
let loose = 0.99

let node integr(x0, x') = x where
  rec x = x0 -> tau *. x' +. (pre x)

(* The bouncing ball *)
let node ball (x_0, y_0) bumpers = (x, y) where
  rec automaton
      | Move ->
          do x = integr (x_0, x_v)
          and automaton
              | Move(y_0, y_v_0) ->
                  do y = integr (y_0, y_v)
                  and y_v = integr (y_v_0, -. g)
                  and bounced = bounce_y (bumpers, x, y, y_0 -> pre y)
                  until bounced (by) & (wait 5) then Move(by, -. loose *. y_v)
                  else (last y < -. 100000.) then Stop
              | Stop -> do done
              init Move(y_0, 0.0)
          and stop = win(x, y, y -> pre y)
          until stop(_) then Win
      | Win -> do done
  and init y = y_0
  and init y_v = 0.0


let bumpers_prior =
  of_list
    (ListP.create
       (12, (of_pair (uniform_float (-5., 14.), uniform_float (0., 10.)))))

let proba bumper_noise (x, y) =
  (sample(gaussian (x, 0.05)), sample(gaussian (y, 0.05)))

let proba sample_bumpers bumpers_d =
  let bumpers = sample bumpers_d in
  ListP.map bumper_noise bumpers


let proba f (d, print) = bumpers where
  rec automaton
      | Run ->
          do init bumpers = sample_bumpers d
          and (x, y) = ball(x_0, y_0) bumpers
          and () = observe (gaussian(y, 500.), World.basket_y)
          and () = observe (gaussian(x, 500.), World.basket_x)
          (* until (x > 20.) then Run *)
          until (y < -100.) then Run
          else (false -> x = pre x) continue Wait(bumpers)
     | Wait(bs) ->
         local b in
         do init bumpers = bs
         and b = wait 100
         until (b) then Run
  and () = present (print) -> World.show (bumpers, (x, y)) else ()

let node move_bumpers d = bumpers where
  rec init bumpers = draw d
  and bumpers = World.move (last bumpers, draw d)

(* Main entry point *)
let node main () = () where
  rec p = (0 fby p + 1) mod 100
  and d = infer_ess_resample 5000 0.7 f (bumpers_prior -> pre d, false)
  (* and d = infer 5000 f (bumpers_prior -> pre d, false) *)
  and bumpers = move_bumpers d
  and x, y = reset
               reset ball (x_0, y_0) bumpers
               every (last y < -100.)
             every (false -> last x = pre (last x))
  and init x = x_0 -. 1.
  and init y = y_0
  and () =
    World.show (bumpers, (x, y));
    Graphics.synchronize ()
  (* and s = present (edge (y < 0.)) -> x *)
  (* and init cpt = 0 *)
  (* and init acc = 0. *)
  (* and present s(v) -> do cpt = last cpt + 1 *)
  (*                     and acc = last acc +. v *)
  (*                     and () = print_int cpt; *)
  (*                              print_string " "; *)
  (*                              print_float (acc /. float cpt); *)
  (*                              print_string " "; *)
  (*                              print_float x; *)
  (*                              print_newline() *)
  (*                     done *)
  (*     end *)
