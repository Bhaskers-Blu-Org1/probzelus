(*
 * Copyright 2018-2020 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *)

open Probzelus
open Infer_pf

(* let proba tune f () = p where *)
(*   rec s = accuracy(f, p) *)
(*   and p = sample (Distribution.uniform_float (0., 0.05)) -> *)
(*           (\* sample (Distribution.beta (alpha, beta)) *\) *)
(*           abs_float (sample (Distribution.gaussian (pre p, sigma))) *)
(*   and alpha = abs_float (pre p /. sigma) *)
(*   and beta = abs_float (1. -. pre p /. sigma) *)
(*   and sigma = 0.001 *)
(*   and () = factor(10. *. log s) *)

(** Sequential *)

(* let node accuracy (f, p) = *)
(*   Util.run_cmd (f ^ " " ^ string_of_float p) *)

(* let proba tune model p_dist = p where *)
(*   rec s = accuracy(model, p) *)
(*   and (_, sigma)= Distribution.stats_float p_dist *)
(*   and p = abs_float (sample (p_dist -> Distribution.gaussian (pre p, sigma))) *)
(*   and () = factor(10. *. log s) *)

(* let node main () = () where *)
(*   rec init p_dist = Distribution.uniform_float (0., 0.05) *)
(*   and p_dist = infer 10 (tune "python simple_model.py --gamma") (last p_dist) *)
(*   and () = print_float (Distribution.mean_float p_dist); print_newline () *)


(** Parallel *)

let node read_result ch =
  let v = input_line ch in
  close_in ch;
  v

let node run_cmd cmd = o where
  rec automaton
      | Launch -> local ch in
          do ch = Util.open_process_in cmd
          and () = print_endline ("Launch: "^cmd)
          then Wait(ch)
      | Wait(ch) ->
          local v in
          do v = read_result ch
          and emit o = v
          and () = print_endline ("Result: "^v^" ("^cmd^")")
          then Launch

let node accuracy (f, p) =
  run_cmd (f ^ " " ^ string_of_float p)

let proba tune model (prior, s_dist) = o where
  rec automaton
      | Compute(sigma) ->
          do  p = abs_float (sample (Distribution.gaussian (last p, sigma)))
          and s = accuracy(model, p)
          until s(acc) then Factor(float_of_string acc)
      | Factor(acc) ->
          do () = factor(10. *. log acc)
          then do emit o = p in Wait
      | Wait ->
          do until s_dist(p_dist)
          then Compute(snd (Distribution.stats_float p_dist))
      init Compute(snd (Distribution.stats_float prior))
  and init p = sample(prior)


let node absent v = s where
  rec automaton
      | Forever -> do until (false) then Never
      | Never -> do emit s = v done


let node main () = () where
  rec init prior = Distribution.uniform_float (0., 0.05)
  and dist = infer_subresample 10
      (tune "python simple_model.py --gamma")
      (false -> pre? s_dist, (prior, absent prior -> pre s_dist))
  and s_dist = Distribution.to_signal dist
  and present s_dist(d) ->
        do () = print_float (Distribution.mean_float prior); print_newline ()
        done
      else do () = print_endline "--------------" done

