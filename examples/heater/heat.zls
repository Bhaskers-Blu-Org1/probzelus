(* The Heater model presented by Nicolas Halbwachs during *)
(* a tutorial on Lustre, College de France, 2010. *)

(* Integrator Euler (forward) *)
let node euler(h)(x0, xprime) = x
  where rec x = x0 -> pre(x +. h *. xprime)

(* Model of a heater *)
let node heater(h)(c, alpha, beta, temp_ext, temp0, u) = temp where
  rec temp =
    euler(h)(temp0,
             if u then alpha *. (c -. temp)
             else beta *. (temp_ext -. temp))

(* Relay (low/high threshold; a single boolean output *)
(* discrete time *)
let node relay(low, high, v) = u where
  rec u = if v < low then true
          else if v > high then false
          else false -> pre u

let node relay_bis(low, high, v) = u where
  rec u = present (v < low) -> true | (v > high) -> false init false

let node relay_six(low, high, v) = u where
  rec automaton
      | Low -> do u = false unless (v <= low) then High
      | High -> do u = true unless (v >= high) then Low
      end

let low = 1.0
let high = 1.0

let c = 50.0

let alpha = 0.1
let beta = 0.1

let h = 0.1

(* Main program *)
let node generic_system(controller)(reference) = (u, temp) where
  rec
      u = run controller(reference -. low, reference +. high, temp)
  and
      temp = heater(h)(c, alpha, beta, 0.0, 0.0, u)

let node system(reference) = generic_system(relay)(reference)

let node main_no_graphics() =
  let u, temp = system(19.0) in
  print_string "u = "; print_string (if u then "true" else "false");
  print_string "   ";
  print_string "temp = "; print_float temp;
  print_newline ();
  flush stdout

let node main() =
  let u, temp = system(19.0) in
  let rec time = 0.0 -> pre time +. h in
  let s = Scope.scope2 (-1.0, 40.0, ("u", Scope.points true,
                                     if u then 1.0 else 0.0),
                        ("temp", Scope.points false, temp)) in
  Scope.window ("main_on_19", 10.0, time, s)

(* let node heater_h(c, alpha, beta, temp_ext, temp0, u) = *)
(*   heater(h)(c, alpha, beta, temp_ext, temp0, u) *)
