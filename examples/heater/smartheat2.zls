(* Une Smart chaudiere ! *)
open Distribution
open Heat

let penality = 1.0

let sample d = Distribution.draw d
let factor (s, v) = s +. v

let sq x = x *. x

(* let node room_model (temp_ext, u) = temp where *)
(*   rec temp = temp_ext -> (pre temp +. 0.1 *. if u then (50. -. pre temp) *)
(*                                              else (temp_ext -. pre temp)) *)

let node room_model (temp_ext, u) = temp where
  rec temp = temp_ext -> (pre temp +. if u then 0.5
                                             else -. 0.5)

let node smart_controller (score, (reference, temp_ext)) = (score, u) where
  rec u =  sample (Distribution.bernoulli 0.5)

let node smart_controller1 (score, (reference, temp_ext)) = (score', u) where
  rec u =  sample (Distribution.bernoulli 0.5)
  and score' = factor (score, -. 1000. *. (sq (reference -. temp)))
  and temp = room_model(temp_ext, u)

let node smart_controller2 (score, (reference, temp_ext)) = (score'', u) where
  rec u =  sample (Distribution.bernoulli 0.5)
  and score' = factor (score, -. (abs_float (reference -. temp)))
  and temp = room_model(temp_ext, u)
  and score'' = factor (score', if u <> u fby u then -1. else 0.)


let node controller (reference, temp_ext) = u where
  rec u_dist = Infer.infer 1000 smart_controller1 (true, (reference, temp_ext))
  and u =
    (* print_string "P(true) = "; *)
    (* print_endline (string_of_float (exp (Distribution.score u_dist true))); *)
    sample u_dist

(* let node mains2 () = *)
(*   let u = controller (15.0, 5.0) in *)
(*   let temp = heater_h(c, alpha, beta, 0.0, 0.0, u) in *)
(*   print_string "u = "; print_string (if u then "true" else "false"); *)
(*   print_string " temp = "; print_float temp; *)
(*   print_newline () *)

(* -------------------------- *)

(* let node utility ((reference, temp_ext), u) = util where *)
(*   rec temp = room_model(temp_ext, u) *)
(*   and util = -. 1000. *. sq (reference -. temp) *)

(* let node smart_ctrl_planning expected_utility (score, (reference, temp_ext)) = *)
(*   (score', u) where *)
(*   rec u =  sample (Distribution.bernoulli 0.5) *)
(*   and score' = factor (score, run expected_utility ((reference, temp_ext), u)) *)

(* let node smart_ctrl_planning (reference, temp_ext) = u where *)
(*   rec u = sample (Distribution.bernoulli 0.5) *)

let node smart_ctrl_planning (utility, (reference, temp_ext)) = (utility', u) where
  rec u = sample (Distribution.bernoulli 0.5)
  and temp = room_model(temp_ext, u)
  and utility' = utility -. 0.1 *. sq (reference -. temp)

(* let node controller_plan (reference, temp_ext) = u where *)
(*   rec u_dist = *)
(*     Infer.plan 10 4 smart_ctrl_planning utility (reference, temp_ext) *)
(*     (\* Infer.infer 10 (smart_ctrl_planning utility) (true, (reference, temp_ext)) *\) *)
(*   and u = sample u_dist *)


(* let node controller_plan (reference, temp_ext) = u where *)
(*   rec u_dist = *)
(*     Infer.infer_depth 100 5 smart_ctrl_planning (reference, temp_ext) *)
(*     (\* Infer.infer 100 smart_ctrl_planning (true, (reference, temp_ext)) *\) *)
(*   and u = sample u_dist *)

let node controller_plan (reference, temp_ext) = u where
  rec u = Infer.plan 10 5 smart_ctrl_planning (reference, temp_ext)


let node mains2 () =
  let u = controller_plan (19.0, 5.0) in
  let temp = heater_h(c, alpha, beta, 0.0, 0.0, u) in
  let rec cpt = 0 fby cpt + 1 in
  let rec cpt_on = 0 fby cpt_on + (if u then 1 else 0) in
  print_string "u = "; print_string (if u then "true" else "false");
  print_string "\ttemp = "; print_float temp;
  print_string "\tratio = "; print_int cpt_on; print_string "/"; print_int cpt;
  print_newline ()
