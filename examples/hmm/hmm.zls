(*
 * Copyright 2018-2020 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *)

open Probzelus
open Distribution
open Display
open Infer_pf

(* Noisy observation of the mouse position. It is a gaussian centered
   on the exact position.
 *)
let node sensor () = obs where
  rec (x, y) = Display.mouse_pos ()
  and in_bound = 0 < x && x < 400 && 0 < y && y < 400
  and obs = present in_bound -> observe_state (float x, float y)

let node display (obs, pos_dist) =
  Display.draw_point_dist pos_dist;
  Display.draw_point Graphics.red obs;
  Display.clear ()

(* The expected position [p] of the mouse is searched around the
   previous one.
 *)
let proba hmm obs = p where
  rec p = sample (sph_gaussian(obs fby p, speed))
  and () = observe (sph_gaussian(p, noise), obs)
  and init t = traj_init ()
  and t = traj_add (last t, p)
  and () = traj_draw t


(* The expected position [p] of the mouse is searched around the
   expected position geven by the previous momentum.
 *)
let proba hmm_momentum(obs) = p where
  rec last_p = obs fby p
  and momentum = (last_p -: (obs fby last_p)) *: 0.7
  and p = sample (sph_gaussian(last_p +: momentum, speed))
  and () = factor(Distribution.score (sph_gaussian(p, noise), obs))
  and init t = traj_init ()
  and t = traj_add (last t, p)
  and () = traj_draw t

let node main () =
  let obs = sensor () in
  present obs(o) ->
    let pos_dist = infer 1000 hmm(* _momentum *) o in
    display(o, pos_dist)
  else ()
