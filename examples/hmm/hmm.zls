open Distribution
open Display
open Infer_pf
(* open Infer_importance *)

(* noisy observation of the mouse position. It is a gaussian centered on the *)
(* exact position *)
let node sensor () = obs where
  rec (x, y) = Display.mouse_pos ()
  and in_bound = 0 < x && x < 400 && 0 < y && y < 400
  and obs = present in_bound -> observe_state (float x, float y)

let node display (obs, pos_dist) =
  Display.draw_point_dist pos_dist;
  Display.draw_point Graphics.red obs;
  Display.clear ()

(* the expected position [p] of the mouse is searched arround the previous *)
(* one supposing that the motion speed of the mouse is bounded *)
let node hmm (prob, obs) = p where
  rec p = sample (prob, sph_gaussian(obs fby p, speed))
  and () = factor (prob, Distribution.score(sph_gaussian(p, noise), obs))
  and init t = traj_init ()
  and t = traj_add (last t, p)
  and () = traj_draw t

let node once n = ok where
  rec init cpt = 1 and cpt = if ok then 1 else last cpt + 1
  and ok = last cpt = n

let node hmm_momentum(prob, obs) = p where
  rec last_p = obs fby p
  and momentum = (last_p -: (obs fby last_p)) *: 0.7
  and p = sample (prob, sph_gaussian(last_p +: momentum, speed))
  and () = factor(prob, Distribution.score (sph_gaussian(p, noise), obs))
  and init t = traj_init ()
  and t = traj_add (last t, p)
  and () = traj_draw t


let node hmm_reset_automaton(prob, obs) = p where
  rec automaton
      | HMM(p_init) ->
          do p = hmm_momentum(prob, obs)
          and last_obs = p_init fby obs
          until
            (norm (obs -: last_obs) > (2. *. norm(speed +: noise))) then HMM(obs)
       init HMM(obs)

let node hmm_reset(prob, obs) = p where
  rec reset p = hmm(prob, obs)
        and last_obs = obs fby obs
        and n = norm (obs -: last_obs)
      every false fby (n > norm(speed +: noise))
  and p_init = Display.p_init -> obs

let node main () =
  let obs = sensor () in
  present obs(o) ->
    let pos_dist = infer 1000 hmm(* _reset_automaton *) o in
    display(o, pos_dist)
  else ()

(* let node every_n k = *)
(*   let rec ok = false -> pre cpt = 0 *)
(*   and cpt = k -> if ok then k else pre cpt - 1 in *)
(*   ok *)

(* let node main () = *)
(*   let obs = sensor () in *)
(*   present obs(o) -> *)
(*     let pos_dist = *)
(*       reset *)
(*      infer 1000 hmm_momentum(true, o) *)
(*       every every_n 10 in *)
(*     display(o, pos_dist) *)
(*   else () *)
