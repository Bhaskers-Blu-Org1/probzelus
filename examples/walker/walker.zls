open Infer
open Distribution
open Walker_misc

(* generateWalker :: Int -> RVar [(Double, (Double, Double))] *)
let node generate_walker n = (dt, mpos) where
  rec init w = real_walker_init ()
  and w = real_motion (dt, last w)
  and mpos = walker_gen_measurement w
  and dt = 10.

(* walkerSimulate :: [(Double, (Double, Double))] -> PProg Walker Walker *)
let node walker_simulate (prob, measurements) = (w.motion_type, w.position) where
  rec w = walker_init (prob, ()) fby walker_step (prob, (dt, meas_pos, w))
  and (dt, meas_pos) = measurements

(* main :: IO () *)
let node main () =
  let measurements = generate_walker () in
  print (infer 1000 walker_simulate measurements)
