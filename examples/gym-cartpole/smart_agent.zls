open Cart_pole

let pi = 3.1415
let gravity = 9.8
let masscart = 1.0
let masspole = 0.1
let total_mass = (masspole +. masscart)
let length = 0.5
let polemass_length = (masspole *. length)
let force_mag = 10.0
let tau = 0.02

let theta_threshold_radians = 12. *. 2. *. pi /. 360.
let x_threshold = 2.4

let node integr(x0, x') = x where
  rec x = x0 -> tau *. x' +. (pre x)

let node pendulum (obs0, action) = obs, reward, stop where
  rec force = if action = Right then force_mag else -. force_mag
  and temp = (force +. polemass_length *. p_theta_dot *. p_theta_dot *. sin p_theta) /. total_mass
  and theta_acc = (gravity *. sin p_theta -. cos p_theta *. temp) /. (length *. (4.0 /. 3.0 -. masspole *. cos p_theta *. cos p_theta /. total_mass))
  and x_acc = temp -. polemass_length *. theta_acc *. cos p_theta /. total_mass

  and theta_dot = integr(obs0.pole_velocity, theta_acc)
  and theta = integr(obs0.pole_angle, theta_dot)
  and x_dot = integr(obs0.cart_velocity, x_acc)
  and x = integr(obs0.cart_position, x_dot)
  and cart_pos = integr(obs0.cart_position, x_dot)

  and p_theta = obs0.pole_angle fby theta
  and p_theta_dot = obs0.pole_velocity fby theta_dot
  and p_theta_acc = 0. fby theta_acc
  and p_x_acc = 0. fby x_acc

  and obs = { cart_position = cart_pos;
              cart_velocity = x_dot;
              pole_angle = theta;
              pole_velocity = theta_dot; }
  and stop = (x < -. x_threshold) or (x > x_threshold) or (theta < -. theta_threshold_radians) or (theta > theta_threshold_radians)
  and reward = if not stop then 1. else 0.


let node cart_pole_gym render action = obs, reward, stop where
  rec init instance_id = cart_init ()
  and init r = 0.
  and automaton
      | Reset -> local dummy
          do obs, reward, stop = cart_reset instance_id, 1., false
          and dummy = print_endline ("Episode reward: "^(string_of_float (last r)))
          and r = 0.
          then Run
      | Run ->
          do obs, reward, stop = cart_step instance_id action render
          and r = reward +. last r
          until stop then Reset


let node cart_pole_zls (obs0, action) = obs, reward, stop where
  rec automaton
      | Reset ->
          do obs, reward, stop = pendulum (obs0, action)
          until stop then Reset


let node controller (obs) = action where
  rec action =
    if Infer.sample (Distribution.bernoulli 0.5) then Right else Left


let node model (score, obs_gym) = score', action where
  rec obs, reward, stop = cart_pole_zls (obs_gym, (Right fby action))
  and action = controller obs
  and score' = Infer.factor (score, -10. *. (abs_float (obs.pole_angle)))

let node smart_main () = () where
  rec reset action = Infer.plan 4 10 model obs
      every true
  and obs, _, stop = cart_pole_gym true (Right fby action)
