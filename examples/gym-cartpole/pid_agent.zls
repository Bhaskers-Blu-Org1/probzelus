open Cart_pole
open Pendulum
open Gym

let gaussian (m, s) = Distribution.gaussian m s

let node print_stats name (m, s) =
  print_string ("("^name^": mean =  ");
  print_float m;
  print_string " var = ";
  print_float s;
  print_string ")";
  print_newline ()

let node controller (angle, (p,i,d)) = action where
  rec e = angle -. (0.0 fby theta)
  and theta = p *. e +. i *. integr(0., e) +. d *. deriv(e)
  and action = if theta > 0. then Right else Left

let node model (prob, (obs_init, p_dist, i_dist, d_dist)) = p, (i, d) where
  rec init p = Infer.sample(prob, p_dist)
  and init d = Infer.sample(prob, d_dist)
  and init i = Infer.sample(prob, i_dist)
  and obs = simple_pendulum (obs_init,  Right fby action)
  and action = controller (obs.pole_angle, (p,i,d))
  and () = Infer.factor(prob, -10. *. abs_float (obs.pole_angle))

let node pid_bayes_update particles (obs, stop) = pid_dist where
  rec init p_stats = 0., 1.
  and init i_stats = 0., 0.01
  and init d_stats = 0., 1.
  and automaton
      | Learn ->
          do pid_dist = Infer.infer particles model (obs, gaussian p_stats, gaussian i_stats, gaussian d_stats)
          and p_dist, id_dist = Distribution.split pid_dist
          and i_dist, d_dist = Distribution.split id_dist
          and ps = Distribution.stats_float p_dist
          and ds = Distribution.stats_float d_dist
          and is = Distribution.stats_float i_dist
          until (snd ps < snd p_stats /. 2.) then  Update(ps, is, ds)
      | Update(ps, is, ds) ->
          do p_stats = ps and d_stats = ds and i_stats = is
          then Learn



let node learn_control particles (obs, stop) = action where
  rec (p, (i, d)) = Distribution.draw pid_dist
  and action = controller (obs.pole_angle, (p, i, d))
  and automaton
      | Learn ->
          do pid_dist = pid_bayes_update particles (obs, stop)
          and p_dist, _ =  Distribution.split pid_dist
          and ps = Distribution.stats_float p_dist
          until (snd ps < 0.1) then do () = print_endline "End Learning" in Control
      | Control -> local score, cpt in
          do reset score = 0 fby (score + 1) every stop
          and cpt = 0 fby if stop && (0 fby score < 100) then cpt + 1 else cpt
          until (cpt > 3) then do () = print_endline "Restart Learning" in Learn



let node pid_main () = () where
  rec obs, _, stop = cart_pole_gym true (Right fby action)
      (* and action = pid_bayes_update 2000 (obs, stop) *)
  and action = learn_control 2000 (obs, stop)
