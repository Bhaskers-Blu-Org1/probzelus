(*
 * Copyright 2018-2020 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *)

(**************************************************************************)
(*                                                                        *)
(*                                Zelus                                   *)
(*               A synchronous language for hybrid systems                *)
(*                       http://zelus.di.ens.fr                           *)
(*                                                                        *)
(*                    Marc Pouzet and Timothy Bourke                      *)
(*                                                                        *)
(*  Copyright 2012 - 2019. All rights reserved.                           *)
(*                                                                        *)
(*  This file is distributed under the terms of the CeCILL-C licence      *)
(*                                                                        *)
(*  Zelus is developed in the INRIA PARKAS team.                          *)
(*                                                                        *)
(**************************************************************************)

type status =
  | Interpolate (* no integration was necessary *)
  | Success of float (* the integration succeed; limit time for correctness *)
  | RootsFound (* a root has been found *)
  | Horizon of float (* returns the next horizon (time event) *)
  | Cascade (* a cascade *)
  | StopTimeReached (* the end of simulation time is reached *)
  | TimeHasPassed (* an output at time [h] is expected but *)
                  (* [h < start] where [start] is the last restart time *)
                  (* of the solver *)
  | Error (* something went wrong during integration *)

type 'a return =
    { time: float; status: status; result: 'a }

(* lift a continuous-time function into a stream function *)
(* [solve f stop_time (h, x) = r] where
 *- [stop_time] is the stop (final) time of the simulation
 *- [f] is the continuous time function (with derivatives and/or zero-crossings)
 *- [(h,x)] is a stream of pairs where [h] is the horizon to reach and
 *- [x] is the current input
 *- the result [r.time] is the achieved time (r.time <= h)
 *- [r.status] is the status of the step
 *- [r.result] is the result. The result only change at a zero-crossing or
 *- cascade event.
 *- if h is increasing then r.time is also increasing *)

val solve : ('a -C-> 'b) -S-> float -S-> float * 'a -D-> 'b return
