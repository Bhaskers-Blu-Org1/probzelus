(*
 * Copyright 2018-2020 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *)

(* the List module from OCaml *)
val length : 'a list -> int

val compare_lengths : 'a list -> 'b list -> int

val compare_length_with : 'a list -> int -> int

val cons : 'a -> 'a list -> 'a list

val hd : 'a list -> 'a

val nth : 'a list -> int -> 'a

val nth_opt : 'a list -> int -> 'a option

val rev : 'a list -> 'a list

(* val init : int -> (int -> 'a) -> 'a list *)

val append : 'a list -> 'a list -> 'a list

val rev_append : 'a list -> 'a list -> 'a list

val concat : 'a list list -> 'a list

val flatten : 'a list list -> 'a list

val iter : ('a -> unit) -> 'a list -> unit

val iteri : (int -> 'a -> unit) -> 'a list -> unit

val map : ('a -> 'b) -> 'a list -> 'b list

val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list

val rev_map : ('a -> 'b) -> 'a list -> 'b list

val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a

val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b

val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit

val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list

val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list

val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a

val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c

val for_all : ('a -> bool) -> 'a list -> bool

val exists : ('a -> bool) -> 'a list -> bool

val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool

val mem : 'a -> 'a list -> bool

val memq : 'a -> 'a list -> bool

val find : ('a -> bool) -> 'a list -> 'a

val find_opt : ('a -> bool) -> 'a list -> 'a option

val filter : ('a -> bool) -> 'a list -> 'a list

val find_all : ('a -> bool) -> 'a list -> 'a list

val partition : ('a -> bool) -> 'a list -> 'a list * 'a list

val assoc : 'a -> ('a * 'b) list -> 'b

val assoc_opt : 'a -> ('a * 'b) list -> 'b option

val assq : 'a -> ('a * 'b) list -> 'b

val assq_opt : 'a -> ('a * 'b) list -> 'b option

val mem_assoc : 'a -> ('a * 'b) list -> bool

val mem_assq : 'a -> ('a * 'b) list -> bool

val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list

val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list

val split : ('a * 'b) list -> 'a list * 'b list

val combine : 'a list -> 'b list -> ('a * 'b) list

val sort : ('a -> 'a -> int) -> 'a list -> 'a list

val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list

val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list

val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list

val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list
